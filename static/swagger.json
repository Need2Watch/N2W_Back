{
  "openapi": "3.0.0",
  "info": {
    "description": "Control your movie night schedule",
    "version": "1.0.0",
    "title": "Need2Watch REST API",
    "contact": {
      "email": "pablorodriguezguillen@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "User",
      "description": "REST API for requesting and returning users"
    },
    {
      "name": "Movie",
      "description": "REST API for requesting and returning movies"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": ["User"],
        "summary": "Creates a new user",
        "requestBody": {
          "description": "User Scheme",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad syntax"
          },
          "409": {
            "description": "Already existing user"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["User"],
        "summary": "Login an user",
        "requestBody": {
          "description": "Login Scheme",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/login"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad syntax"
          },
          "409": {
            "description": "Already existing user"
          }
        }
      }
    },
    "/movies/{movie_id}": {
      "get": {
        "tags": ["Movie"],
        "summary": "Returns the movie with the given id",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "movie_id",
            "in": "path",
            "description": "Movie ID from TheMovieDatabase API",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/components/schemas/movie"
            }
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/movies/{movie_id}/{user_id}": {
      "get": {
        "tags": ["Movie"],
        "summary": "Returns the movie with the given id and for the given user",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "movie_id",
            "in": "path",
            "description": "Movie ID from TheMovieDatabase API",
            "required": true,
            "type": "integer"
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/components/schemas/movie"
            }
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/movies/popular": {
      "get": {
        "tags": ["Movie"],
        "summary": "Returns popular movies of the moment",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/components/schemas/movie"
            }
          },
          "404": {
            "description": "Movies not found"
          }
        }
      }
    },
    "/movies/popular/{user_id}": {
      "get": {
        "tags": ["Movie"],
        "summary": "Returns popular movies of the moment for the given user",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/components/schemas/movie"
            }
          },
          "404": {
            "description": "Movies not found"
          }
        }
      }
    },
    "/movies/similar/{id}": {
      "get": {
        "tags": ["Movie"],
        "summary": "Returns similar movies to the one with the given id",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Movie ID from TheMovieDatabase API",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/components/schemas/movie"
            }
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/movies/similar/{movie_id}/{user_id}": {
      "get": {
        "tags": ["Movie"],
        "summary": "Returns similar movies to the one with the given id for the given user",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "movie_id",
            "in": "path",
            "description": "Movie ID from TheMovieDatabase API",
            "required": true,
            "type": "integer"
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/components/schemas/movie"
            }
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/movies/following/{user_id}": {
      "get": {
        "tags": ["Movie"],
        "summary": "Returns the followed movies by the user of the given id",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/components/schemas/movie"
            }
          },
          "404": {
            "description": "Movies not found"
          }
        }
      }
    },
    "/movies/watched/{user_id}": {
      "get": {
        "tags": ["Movie"],
        "summary": "Returns the watched movies by the user of the given id",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/components/schemas/movie"
            }
          },
          "404": {
            "description": "Movies not found"
          }
        }
      }
    },
    "/movies/search": {
      "post": {
        "tags": ["Movie"],
        "summary": "Searches for a movie by the name",
        "requestBody": {
          "description": "Movie Name and user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/search"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad syntax"
          },
          "409": {
            "description": "Already existing user"
          }
        }
      }
    },
    "/movies/follow": {
      "post": {
        "tags": ["Movie"],
        "summary": "Follows a movie",
        "requestBody": {
          "description": "Movie Id and user Id",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/follow"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad syntax"
          },
          "409": {
            "description": "Already existing user"
          }
        }
      }
    },
    "/movies/unfollow": {
      "post": {
        "tags": ["Movie"],
        "summary": "Unfollows a movie",
        "requestBody": {
          "description": "Movie Id and user Id",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/follow"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad syntax"
          },
          "409": {
            "description": "Already existing user"
          }
        }
      }
    },
    "/movies/watch": {
      "post": {
        "tags": ["Movie"],
        "summary": "Watchs a movie",
        "requestBody": {
          "description": "Movie id and user Id",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/follow"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad syntax"
          },
          "409": {
            "description": "Already existing user"
          }
        }
      }
    },
    "/movies/unwatch": {
      "post": {
        "tags": ["Movie"],
        "summary": "Unwatchs a movie",
        "requestBody": {
          "description": "Movie id and user Id",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/follow"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad syntax"
          },
          "409": {
            "description": "Already existing user"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "login": {
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        }
      },
      "user": {
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "city": {
            "type": "string"
          }
        }
      },
      "movie": {
        "properties": {
          "movie_id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "poster_url": {
            "type": "string"
          },
          "rating": {
            "type": "number",
            "format": "float"
          },
          "genres": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "overview": {
            "type": "string"
          },
          "following": {
            "type": "boolean"
          },
          "watched": {
            "type": "boolean"
          }
        }
      },
      "search": {
        "properties": {
          "title": {
            "type": "integer"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "follow": {
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "movie_id": {
            "type": "integer"
          }
        }
      }
    }
  }
}
